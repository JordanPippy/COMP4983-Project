{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["HomepageRow","props","files","index","state","file","console","warn","src","width","height","this","Container","className","fluid","Row","Col","renderImage","fileName","React","Component","Home","fetch","then","response","json","res","setState","i","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAyCMA,E,kDAEF,WAAYC,GACX,IAAD,sBAEI,IAAIC,GADJ,cAAMD,IACWA,MAAMC,MACnBC,EAAQ,EAAKF,MAAME,MAH3B,OAKI,EAAKC,MAAQ,CACTF,MAAOA,EACPC,MAAOA,GAPf,E,wDAUYE,GAER,OADAC,QAAQC,KAAK,iBAAmBF,GAE5B,qBAAKG,IAAKH,EAAMI,MAAM,QAAQC,OAAO,Y,+BAKzC,IAAIP,EAAQQ,KAAKP,MAAMD,MACvB,OACI,8BACA,cAACS,EAAA,EAAD,CAAWC,UAAU,mBAAmBC,OAAO,EAA/C,SACI,eAACC,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,GAAOe,YAE/C,cAACF,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,EAAQ,GAAGe,YAEnD,cAACF,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,EAAQ,GAAGe,YAEnD,cAACF,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,EAAQ,GAAGe,YAEnD,cAACF,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,EAAQ,GAAGe,YAEnD,cAACF,EAAA,EAAD,UAAML,KAAKM,YAAYN,KAAKP,MAAMF,MAAMC,EAAQ,GAAGe,uB,GArC7CC,IAAMC,WA0FjBC,E,kDA3CX,WAAYpB,GACX,IAAD,8BACI,cAAMA,IAEDG,MAAQ,CACTF,MAAO,GACPC,MAAO,GALf,E,gEAUqB,IAAD,OAChBG,QAAQC,KAAK,UACbe,MAAM,sCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAACzB,MAAOwB,S,+BAK5B,IAAK,IAAIE,EAAI,EAAGA,EAAIjB,KAAKP,MAAMF,MAAM2B,OAAQD,IAEzCtB,QAAQC,KAAKI,KAAKP,MAAMF,MAAM0B,GAAGV,UAErC,OAAMP,KAAKP,MAAMF,MAAM2B,OAAS,EAI5B,gCACI,8BACI,cAAC,EAAD,CAAa3B,MAAOS,KAAKP,MAAMF,MAClBC,MAAOQ,KAAKP,MAAMD,UAGnC,8BACI,4CAVD,S,GA3BAgB,IAAMC,WC3EVU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3465dcb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport { Button } from 'reactstrap';\nimport { Container, Row, Col } from 'reactstrap';\n\n/*\n<div>\n<Container>\n    <Row>\n        <Col>1</Col>\n        <Col>2/Col>\n        <Col>3/Col>\n        <Col>4/Col>\n        <Col>5/Col>\n        <Col>6/Col>\n        <Col>7/Col>\n        <Col>8/Col>\n        <Col>9/Col>\n        <Col>10/Col>\n    </Row>\n    <Row>\n        <Col>1 of 3</Col>\n        <Col>2 of 3</Col>\n        <Col>3 of 3</Col>\n    </Row>\n</Container>\n</div>\n*/\n\nfunction runQuery(query, props) {\n    console.warn(\"using database <client side>\");\n    fetch('http://192.168.0.12:3000/CharactersID')\n      .then(response => response.fileName)\n      .then(CharactersID => this.setState({\n          filenames: CharactersID,\n      }))\n}\n\n//    <Col><img src=\"pic_trulli.jpg\" alt=\"{this.props.}\"></img></Col>\n\nclass HomepageRow extends React.Component {\n\n    constructor(props)\n    {\n        super(props);\n        let files = this.props.files;\n        let index = this.props.index;\n\n        this.state = {\n            files: files,\n            index: index,\n        };\n    }\n    renderImage(file) {\n        console.warn(\"IN RENDERIMAGE\" + file);\n        return (\n            <img src={file} width=\"150px\" height=\"150px\"></img>\n        );\n    }\n\n    render() {\n        let index = this.state.index;\n        return (\n            <div>\n            <Container className=\"themed-container\" fluid={true}>\n                <Row>\n\n                    <Col>{this.renderImage(this.state.files[index].fileName)}</Col>\n\n                    <Col>{this.renderImage(this.state.files[index + 1].fileName)}</Col>\n\n                    <Col>{this.renderImage(this.state.files[index + 2].fileName)}</Col>\n\n                    <Col>{this.renderImage(this.state.files[index + 3].fileName)}</Col>\n\n                    <Col>{this.renderImage(this.state.files[index + 4].fileName)}</Col>\n\n                    <Col>{this.renderImage(this.state.files[index + 5].fileName)}</Col>\n                </Row>\n            </Container>\n            </div>\n        );\n    }\n}\n\n\nclass Home extends React.Component {\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            files: [],\n            index: 0,\n        };\n        //runQuery('CharactersID', props)\n    }\n\n    componentDidMount() {\n        console.warn(\"mount?\")\n        fetch('http://192.168.0.12:3000/fileNames')\n          .then(response => response.json())\n          .then(res => {\n              this.setState({files: res});\n          });\n    }\n\n    render() {\n        for (let i = 0; i < this.state.files.length; i++)\n        {\n            console.warn(this.state.files[i].fileName);\n        }\n        if (!(this.state.files.length > 0))\n            return null;\n\n        return (\n            <div>\n                <div>\n                    <HomepageRow files={this.state.files}\n                                 index={this.state.index}\n                    />\n                </div>\n                <div>\n                    <h1>hello</h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}